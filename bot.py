# bot.py ‚Äî AntiZalipBot (—Ñ–∏–Ω–∞–ª)
# –§–∏—á–∏:
# - –ü–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–ó–∞–ª–∏–ø–∞—Ç–æ—Ä), –º–µ–Ω—é –∏ –¥–µ–π—Å—Ç–≤–∏—è
# - –ë–∏—Ç–≤–∞ —Å –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–æ–º (—á–µ–ª–ª–µ–Ω–¥–∂–∏, –ø–æ–±–µ–¥—ã/—Å–¥–∞—á–∏, ¬´–º–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã¬ª)
# - –¢–∞–π–º–µ—Ä—ã (5/15/30/—Å–≤–æ–π), /stop, —É—á—ë—Ç ¬´timer_done¬ª
# - –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç (–∫–Ω–æ–ø–∫–∞ + –Ω—É–¥–∂ + ForceReply), –ò–ò-–∫–æ—É—á
# - Nightly-–¥–∞–π–¥–∂–µ—Å—Ç (–µ–∂–µ–≤–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞ —Å –ò–ò-–∫–æ–º–º–µ–Ω—Ç–æ–º)
# - –õ–∏–º–∏—Ç—ã: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ –ò–ò-–≤—ã–∑–æ–≤–∞–º/—Å—É—Ç–∫–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ $ –≤ —Å—É—Ç–∫–∏
# - Healthcheck web-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render Free)
#
# ENV:
#   TELEGRAM_TOKEN=...
#   OPENAI_API_KEY=...            # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–ª–±–µ–∫-—Ñ—Ä–∞–∑—ã
#   OPENAI_BASE_URL=...           # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
#   MODEL_NAME=gpt-4o-mini
#   PYTHON_VERSION=3.12.5         # –Ω–∞ Render
#   DIGEST_TZ=Europe/Moscow
#   DIGEST_HOUR=22
#   MAX_AI_CALLS_PER_DAY=30
#   MAX_DAILY_SPEND=1.0

import os
import asyncio
import logging
import random
from datetime import datetime, timedelta, date, timezone
from zoneinfo import ZoneInfo

import aiosqlite
from dotenv import load_dotenv
from aiohttp import web

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from aiogram.types import ForceReply
from aiogram.client.session.aiohttp import AiohttpSession

# –ò–ò-–∫–ª–∏–µ–Ω—Ç
try:
    from openai import AsyncOpenAI
except Exception:
    AsyncOpenAI = None

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
load_dotenv(os.path.join(BASE_DIR, ".env"))

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –≤ .env –∏–ª–∏ Environment.")

OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")
OPENAI_BASE_URL = os.getenv("OPENAI_BASE_URL")
MODEL_NAME      = os.getenv("MODEL_NAME", "gpt-4o-mini")

DIGEST_TZ   = os.getenv("DIGEST_TZ", "Europe/Moscow")
DIGEST_HOUR = int(os.getenv("DIGEST_HOUR", "22"))

MAX_AI_CALLS_PER_DAY = int(os.getenv("MAX_AI_CALLS_PER_DAY", "30"))
MAX_DAILY_SPEND      = float(os.getenv("MAX_DAILY_SPEND", "1.0"))

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("AntiZalipBot")

# ---------- Aiogram ----------
session = AiohttpSession()
bot = Bot(TOKEN, session=session)
dp = Dispatcher()

# ---------- OpenAI ----------
oa_client = None
if OPENAI_API_KEY and AsyncOpenAI:
    try:
        oa_client = AsyncOpenAI(api_key=OPENAI_API_KEY, base_url=OPENAI_BASE_URL)
        log.info("‚úÖ OpenAI client initialized")
    except Exception as e:
        log.warning(f"OpenAI init failed: {e}")

# ---------- –ë–î ----------
DB_PATH = os.path.join(BASE_DIR, "bot.db")

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_digest_date TEXT
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            event TEXT,
            value REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )""")
        await db.commit()

async def ensure_user(uid: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO users(user_id) VALUES(?)", (uid,))
        await db.commit()

async def log_event(uid: int, event: str, value: float | None = None):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO events(user_id,event,value) VALUES(?,?,?)", (uid, event, value))
        await db.commit()

# ---------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
async def fetch_stats(uid: int) -> dict:
    async with aiosqlite.connect(DB_PATH) as db:
        # –ø–æ–±–µ–¥—ã/—Å–¥–∞—á–∏/–º–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã (–ø–æ –±–∏—Ç–≤–∞–º)
        cur = await db.execute("SELECT COUNT(*) FROM events WHERE user_id=? AND event='battle_win'", (uid,))
        wins, = await cur.fetchone()
        cur = await db.execute("SELECT COUNT(*) FROM events WHERE user_id=? AND event='battle_lose'", (uid,))
        loses, = await cur.fetchone()
        cur = await db.execute("SELECT COALESCE(SUM(value),0) FROM events WHERE user_id=? AND event='battle_win'", (uid,))
        reclaimed, = await cur.fetchone()
        # —Å–µ–≥–æ–¥–Ω—è –ø–æ —Ç–∞–π–º–µ—Ä–∞–º
        cur = await db.execute("""
            SELECT COUNT(*), COALESCE(SUM(value),0)
            FROM events
            WHERE user_id=? AND event='timer_done' AND substr(created_at,1,10)=date('now')
        """, (uid,))
        today_cnt, today_min = await cur.fetchone()
    return {
        "wins": int(wins or 0),
        "loses": int(loses or 0),
        "reclaimed": int(reclaimed or 0),
        "today_cnt": int(today_cnt or 0),
        "today_min": int(today_min or 0)
    }

async def free_chat_count_today(uid: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT COUNT(*) FROM events
            WHERE user_id=? AND event='free_chat' AND substr(created_at,1,10)=date('now')
        """, (uid,))
        n, = await cur.fetchone()
    return int(n or 0)

# ---------- –õ–∏–º–∏—Ç—ã –ò–ò ----------
async def ai_calls_today(uid: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT COUNT(*) FROM events
            WHERE user_id=? AND event='ai_call' AND substr(created_at,1,10)=date('now')
        """, (uid,))
        n, = await cur.fetchone()
        return int(n or 0)

async def can_use_ai(uid: int) -> bool:
    return (await ai_calls_today(uid)) < MAX_AI_CALLS_PER_DAY

async def mark_ai_call(uid: int):
    await log_event(uid, "ai_call", 1)

async def mark_ai_block(uid: int):
    await log_event(uid, "ai_block", 1)

async def total_spend_today() -> float:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT COALESCE(SUM(value),0) FROM events
            WHERE event='ai_usd' AND substr(created_at,1,10)=date('now')
        """)
        val, = await cur.fetchone()
        return float(val or 0.0)

async def add_spend(amount: float):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO events(user_id,event,value) VALUES(?,?,?)", (0, 'ai_usd', float(amount)))
        await db.commit()

async def can_spend(amount: float) -> bool:
    return (await total_spend_today()) + float(amount) <= MAX_DAILY_SPEND

# ---------- –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ----------
SYSTEM_COACH = "–¢—ã –∂—ë—Å—Ç–∫–∏–π, –Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."

async def ai_generate(prompt: str, temperature: float = 0.8, max_tokens: int = 200) -> str | None:
    if not oa_client:
        # —Ñ–æ–ª–ª–±–µ–∫, –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return random.choice([
            "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É –Ω–∞ 60 —Å–µ–∫—É–Ω–¥, —Ä–∞—Å–ø—Ä–∞–≤—å –ø–ª–µ—á–∏ –∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            "–ó–∞–ª–∏–ø–∞—Ç–æ—Ä –∂—Ä—ë—Ç –º–∏–Ω—É—Ç—ã ‚Äî –≤–µ—Ä–Ω–∏ —Å–µ–±–µ 2 –º–∏–Ω—É—Ç—ã –≤–Ω–∏–º–∞–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
            "–í—Å—Ç–∞–Ω—å, –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã, 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ ‚Äî –∏ –≤–ø–µ—Ä—ë–¥ –∫ –æ–¥–Ω–æ–º—É –º–∞–ª–µ–Ω—å–∫–æ–º—É —à–∞–≥—É."
        ])
    try:
        resp = await oa_client.chat.completions.create(
            model=MODEL_NAME,
            temperature=temperature,
            max_tokens=max_tokens,
            messages=[
                {"role": "system", "content": SYSTEM_COACH},
                {"role": "user", "content": prompt},
            ],
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        log.warning(f"AI error: {e}")
        return None

async def ai_reply(uid: int, prompt: str, temperature=0.8, max_tokens=200) -> str:
    # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    if not await can_use_ai(uid):
        await mark_ai_block(uid)
        return random.choice([
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –º–Ω–æ–≥–æ –æ–±—â–∞–ª—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º ü§ñ. –û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º: 60 —Å–µ–∫ –¥—ã—Ö–∞–Ω–∏—è –∏ –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            "–ü–∞—É–∑–∞ –ò–ò –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –°–¥–µ–ª–∞–π 2-–º–∏–Ω—É—Ç–Ω—ã–π –º–∏–∫—Ä–æ-—à–∞–≥ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –ø–æ–±–µ–¥—É.",
            "–ë–µ–∑ –ò–ò: –≤–æ–¥–∞, –¥—ã—Ö–∞–Ω–∏–µ, –æ–¥–∏–Ω –∫—Ä–æ—à–µ—á–Ω—ã–π —à–∞–≥ ‚Äî –∏ —Ç—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ."
        ])
    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç $ (–æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ max_tokens)
    est_cost = (max_tokens / 1000.0) * 0.0006  # ~ $0.0006 –∑–∞ 1 —Ç–æ–∫–µ–Ω –æ—Ç–≤–µ—Ç–∞
    if not await can_spend(est_cost):
        await mark_ai_block(uid)
        return "–°–µ–≥–æ–¥–Ω—è –æ–±—â–∏–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–æ—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç üí∏. –ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ –ò–ò-—Ä–µ–∂–∏–º–µ. –ü–æ–∫–∞ —Å–¥–µ–ª–∞–π –æ—Ñ–ª–∞–π–Ω-–º–∏–Ω–∏-—à–∞–≥!"

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    text = await ai_generate(prompt, temperature=temperature, max_tokens=max_tokens)
    await mark_ai_call(uid)
    await add_spend(est_cost)
    return text or random.choice([
        "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É, —Ä–∞—Å–ø—Ä–∞–≤—å –ø–ª–µ—á–∏, –ø–æ–¥—ã—à–∏. –ü–æ—Ç–æ–º –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        "–•–≤–∞—Ç–∏—Ç –∫–æ—Ä–º–∏—Ç—å –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–µ–º. –í—Å—Ç–∞–Ω—å, –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã ‚Äî –∏ –¥–µ–ª–∞–π –æ–¥–∏–Ω —à–∞–≥."
    ])

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
def main_menu_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõë –Ø –∑–∞–ª–∏–ø", callback_data="battle:start")],
        [types.InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É", callback_data="ask")],
        [types.InlineKeyboardButton(text="‚è≥ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="menu:timer")],
        [types.InlineKeyboardButton(text="üõå –†–µ–∂–∏–º —Å–Ω–∞ (30 –º–∏–Ω)", callback_data="sleep:30")],
        [
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:stats"),
            types.InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="menu:help"),
        ],
    ])

def timers_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="5 –º–∏–Ω", callback_data="timer:5"),
            types.InlineKeyboardButton(text="15 –º–∏–Ω", callback_data="timer:15"),
            types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data="timer:30"),
        ],
        [types.InlineKeyboardButton(text="–°–≤–æ–π‚Ä¶", callback_data="timer:custom")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
    ])

# ---------- –¢–µ–∫—Å—Ç—ã ----------
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø AntiZalipBot üëã\n"
    "–ü–æ–º–æ–≥—É –≤—ã—Ä–≤–∞—Ç—å—Å—è –∏–∑ –ª–∞–ø –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–π—Ñ –æ—Ç –∂–∏–∑–Ω–∏.\n\n"
    "–ú–æ–∂–Ω–æ –∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. "
    "–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –∂—ë—Å—Ç–∫–∏–π, –Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä.\n\n"
    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
)
HELP_TEXT = (
    "–Ø –ø–æ–º–æ–≥–∞—é –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∑–∞–ª–∏–ø–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–Ω–∏–º–∞–Ω–∏–µ–º.\n\n"
    "–ß—Ç–æ —É–º–µ—é:\n"
    "‚Ä¢ üõë ¬´–Ø –∑–∞–ª–∏–ø¬ª ‚Äî –≤—ã–∑–æ–≤—É –Ω–∞ –±–∏—Ç–≤—É —Å –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–æ–º\n"
    "‚Ä¢ üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ‚Äî –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä—É\n"
    "‚Ä¢ ‚è≥ –¢–∞–π–º–µ—Ä 5/15/30 –∏–ª–∏ —Å–≤–æ–π\n"
    "‚Ä¢ üìä /stats ‚Äî —Ç–≤–æ–∏ –ø–æ–±–µ–¥—ã, –º–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã –∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã: ¬´—è –∑–∞–ª–∏–ø –≤ —Ä–∏–ª—Å–∞—Ö¬ª, ¬´–Ω–µ—Ç —Å–∏–ª –Ω–∞—á–∞—Ç—å¬ª, ¬´—Å–æ—Ä–≤–∞–ª—Å—è –∏ –Ω–µ–ª–æ–≤–∫–æ¬ª, ¬´—Ö–æ—á—É –ø–ª–∞–Ω –Ω–∞ –≤–µ—á–µ—Ä¬ª."
)

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------
class TimerStates(StatesGroup):
    waiting_minutes = State()

class AskStates(StatesGroup):
    waiting_input = State()

# ---------- –¢–∞–π–º–µ—Ä—ã ----------
active_timers: dict[int, asyncio.Task] = {}
timer_meta: dict[int, tuple[datetime, int]] = {}  # uid -> (until_utc, minutes)

async def cancel_user_timer(uid: int):
    t = active_timers.pop(uid, None)
    timer_meta.pop(uid, None)
    if t and not t.done():
        t.cancel()

async def schedule_timer(chat_id: int, uid: int, minutes: int):
    try:
        await asyncio.sleep(minutes * 60)
        await log_event(uid, "timer_done", minutes)
        active_timers.pop(uid, None)
        timer_meta.pop(uid, None)
        await bot.send_message(chat_id, f"‚è∞ {minutes} –º–∏–Ω—É—Ç –≤—ã—à–ª–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                               reply_markup=types.InlineKeyboardMarkup(
                                   inline_keyboard=[
                                       [types.InlineKeyboardButton(text="üîÅ –ï—â—ë —Å—Ç–æ–ª—å–∫–æ –∂–µ", callback_data="timer:again")],
                                       [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
                                   ]
                               ))
    except asyncio.CancelledError:
        pass

async def start_timer(chat_id: int, uid: int, minutes: int):
    await cancel_user_timer(uid)
    until = datetime.now(timezone.utc) + timedelta(minutes=minutes)
    timer_meta[uid] = (until, minutes)
    task = asyncio.create_task(schedule_timer(chat_id, uid, minutes))
    active_timers[uid] = task

# ---------- –ù—É–¥–∂ –ø—Ä–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ----------
async def maybe_show_free_chat_nudge(uid: int, chat_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT 1 FROM events WHERE user_id=? AND event='free_chat' LIMIT 1", (uid,))
        row = await cur.fetchone()
    if row:
        return
    await bot.send_message(
        chat_id,
        "üí¨ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ ¬´—è –∑–∞–ª–∏–ø –≤ —Ä–∏–ª—Å–∞—Ö¬ª\n‚Ä¢ ¬´–Ω–µ—Ç —Å–∏–ª –Ω–∞—á–∞—Ç—å¬ª\n‚Ä¢ ¬´–≤—ã–≥–æ—Ä–µ–ª¬ª",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É", callback_data="ask")]]
        )
    )

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    await ensure_user(msg.from_user.id)
    await log_event(msg.from_user.id, "start")
    await msg.answer(WELCOME_TEXT, reply_markup=main_menu_kb())
    await maybe_show_free_chat_nudge(msg.from_user.id, msg.chat.id)

@dp.message(Command("menu"))
async def cmd_menu(msg: types.Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await maybe_show_free_chat_nudge(msg.from_user.id, msg.chat.id)

@dp.message(Command("help"))
async def cmd_help(msg: types.Message):
    await msg.answer(HELP_TEXT, reply_markup=main_menu_kb())

@dp.message(Command("stop"))
async def cmd_stop(msg: types.Message):
    await cancel_user_timer(msg.from_user.id)
    await msg.answer("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_kb())

@dp.message(Command("stats"))
async def cmd_stats(msg: types.Message):
    s = await fetch_stats(msg.from_user.id)
    chats = await free_chat_count_today(msg.from_user.id)
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üèÜ –ü–æ–±–µ–¥—ã –Ω–∞–¥ –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–æ–º: {s['wins']}\n"
        f"üôà –°–¥–∞—á–∏ –ó–∞–ª–∏–ø–∞—Ç–æ—Ä—É: {s['loses']}\n"
        f"‚è≥ –ú–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã: {s['reclaimed']}\n"
        f"‚è∞ –¢–∞–π–º–µ—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {s['today_cnt']} (–º–∏–Ω: {s['today_min']})\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä—É —Å–µ–≥–æ–¥–Ω—è: {chats}"
    )
    await msg.answer(text, reply_markup=main_menu_kb())

@dp.message(Command("ai_status"))
async def ai_status(msg: types.Message):
    ok = bool(oa_client and OPENAI_API_KEY)
    used = await ai_calls_today(msg.from_user.id)
    left = max(0, MAX_AI_CALLS_PER_DAY - used)
    spent = await total_spend_today()
    await msg.answer(
        f"ü§ñ AI: {'ON ‚úÖ' if ok else 'OFF ‚ùå'}\n"
        f"Model: {MODEL_NAME}\nBase: {OPENAI_BASE_URL or 'default'}\n"
        f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {used}/{MAX_AI_CALLS_PER_DAY} (–æ—Å—Ç–∞–ª–æ—Å—å {left})\n"
        f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥: ${spent:.4f}/{MAX_DAILY_SPEND:.2f}"
    )

@dp.message(Command("adm_digest_now"))
async def adm_digest_now(msg: types.Message):
    await _send_digest_to_user(msg.from_user.id)
    await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.")

# ---------- –ú–µ–Ω—é (callback) ----------
@dp.callback_query(F.data == "menu:root")
async def cb_menu_root(call: types.CallbackQuery):
    await call.message.edit_text(WELCOME_TEXT, reply_markup=main_menu_kb())
    await call.answer()

@dp.callback_query(F.data == "menu:help")
async def cb_menu_help(call: types.CallbackQuery):
    await call.message.edit_text(HELP_TEXT, reply_markup=main_menu_kb())
    await call.answer()

@dp.callback_query(F.data == "menu:stats")
async def cb_menu_stats(call: types.CallbackQuery):
    s = await fetch_stats(call.from_user.id)
    chats = await free_chat_count_today(call.from_user.id)
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üèÜ –ü–æ–±–µ–¥—ã –Ω–∞–¥ –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–æ–º: {s['wins']}\n"
        f"üôà –°–¥–∞—á–∏ –ó–∞–ª–∏–ø–∞—Ç–æ—Ä—É: {s['loses']}\n"
        f"‚è≥ –ú–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã: {s['reclaimed']}\n"
        f"‚è∞ –¢–∞–π–º–µ—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {s['today_cnt']} (–º–∏–Ω: {s['today_min']})\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä—É —Å–µ–≥–æ–¥–Ω—è: {chats}"
    )
    await call.message.edit_text(text, reply_markup=main_menu_kb())
    await call.answer()

# ---------- –¢–∞–π–º–µ—Ä—ã (callback) ----------
@dp.callback_query(F.data == "menu:timer")
async def cb_menu_timer(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞:", reply_markup=timers_kb())
    await call.answer()

@dp.callback_query(F.data.startswith("timer:"))
async def cb_timer(call: types.CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    chat_id = call.message.chat.id
    data = call.data

    if data == "timer:custom":
        await state.set_state(TimerStates.waiting_minutes)
        await call.message.edit_text(
            "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (1‚Äì180):",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:timer")]
            ])
        )
        await call.answer()
        return

    if data == "timer:again":
        minutes = timer_meta.get(uid, (None, 15))[1]
    else:
        minutes = int(data.split(":")[1])

    await start_timer(chat_id, uid, minutes)
    await call.message.edit_text(
        f"‚úÖ –¢–∞–π–º–µ—Ä –≤–∫–ª—é—á—ë–Ω –Ω–∞ {minutes} –º–∏–Ω.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="timer:stop")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
        ])
    )
    await call.answer("–ü–æ–µ—Ö–∞–ª–∏!")

@dp.callback_query(F.data == "timer:stop")
async def cb_timer_stop(call: types.CallbackQuery):
    await cancel_user_timer(call.from_user.id)
    await call.message.edit_text("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_kb())
    await call.answer()

@dp.message(TimerStates.waiting_minutes, F.text)
async def custom_minutes_input(msg: types.Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text.isdigit():
        await msg.reply("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1‚Äì180. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ /menu.")
        return
    n = int(text)
    if not (1 <= n <= 180):
        await msg.reply("–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1‚Äì180 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await state.clear()
    await start_timer(msg.chat.id, msg.from_user.id, n)
    await msg.reply(
        f"‚úÖ –¢–∞–π–º–µ—Ä –≤–∫–ª—é—á—ë–Ω –Ω–∞ {n} –º–∏–Ω.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="timer:stop")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
        ])
    )

# ---------- –ë–∏—Ç–≤–∞ —Å –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–æ–º ----------
@dp.callback_query(F.data == "battle:start")
async def cb_battle(call: types.CallbackQuery):
    uid = call.from_user.id
    await ensure_user(uid)
    challenge = random.choice([
        "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π üí™",
        "–í—Å—Ç–∞–Ω—å, –≤—ã–¥–æ—Ö–Ω–∏, –Ω–∞–ª–µ–π –≤–æ–¥—ã üíß",
        "–ó–∞–ø–∏—à–∏ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞ 2 –º–∏–Ω—É—Ç—ã ‚úçÔ∏è",
        "–ü—Ä–æ—Ç—Ä–∏ —Å—Ç–æ–ª/—ç–∫—Ä–∞–Ω –∑–∞ 1 –º–∏–Ω—É—Ç—É üßΩ",
        "–°–¥–µ–ª–∞–π 20 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ —Ä–∞—Å–ø—Ä–∞–≤—å –ø–ª–µ—á–∏ ü´Å",
    ])
    text = f"‚öîÔ∏è –ó–∞–ª–∏–ø–∞—Ç–æ—Ä —Ç—è–Ω–µ—Ç —Ç–µ–±—è –≤ —Ä–∏–ª—Å—ã!\n\nüéØ –ß–µ–ª–ª–µ–Ω–¥–∂: {challenge}\n–°–ø—Ä–∞–≤–∏—à—å—Å—è?"
    await call.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞–ª", callback_data="battle:win")],
            [types.InlineKeyboardButton(text="‚ùå –°–¥–∞–ª—Å—è", callback_data="battle:lose")],
        ])
    )
    await call.answer()

@dp.callback_query(F.data == "battle:win")
async def cb_battle_win(call: types.CallbackQuery):
    uid = call.from_user.id
    # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–Ω–æ 5 –º–∏–Ω—É—Ç —Å–≤–æ–±–æ–¥—ã
    await log_event(uid, "battle_win", 5)
    s = await fetch_stats(uid)
    await call.message.edit_text(
        f"üèÜ –ü–æ–±–µ–¥–∞! –¢—ã –æ—Ç–æ–±—Ä–∞–ª —É –ó–∞–ª–∏–ø–∞—Ç–æ—Ä–∞ 5 –º–∏–Ω—É—Ç —Å–≤–æ–±–æ–¥—ã.\n"
        f"–í—Å–µ–≥–æ –ø–æ–±–µ–¥: {s['wins']} | –°–¥–∞—á: {s['loses']}\n"
        f"‚è≥ –ú–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã: {s['reclaimed']}",
        reply_markup=main_menu_kb()
    )
    await call.answer()

@dp.callback_query(F.data == "battle:lose")
async def cb_battle_lose(call: types.CallbackQuery):
    uid = call.from_user.id
    await log_event(uid, "battle_lose", 0)
    s = await fetch_stats(uid)
    await call.message.edit_text(
        f"üòà –ó–∞–ª–∏–ø–∞—Ç–æ—Ä –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é –ø–æ–±–µ–¥—É‚Ä¶\n"
        f"–ü–æ–±–µ–¥: {s['wins']} | –°–¥–∞—á: {s['loses']}\n\n"
        f"–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è ‚Äî –∂–º–∏ ¬´üõë –Ø –∑–∞–ª–∏–ø¬ª —Å–Ω–æ–≤–∞.",
        reply_markup=main_menu_kb()
    )
    await call.answer()

# ---------- –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ----------
@dp.callback_query(F.data == "ask")
async def cb_ask(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(AskStates.waiting_input)
    await call.message.answer(
        "–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º-–¥–≤—É–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ —á–µ–º –ø–æ–º–æ—á—å.",
        reply_markup=ForceReply(selective=True, input_field_placeholder="–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é‚Ä¶")
    )
    await call.answer()

@dp.message(AskStates.waiting_input, F.text)
async def ask_input(msg: types.Message, state: FSMContext):
    await state.clear()
    uid = msg.from_user.id
    await ensure_user(uid)
    await log_event(uid, "free_chat")
    try:
        await bot.send_chat_action(msg.chat.id, ChatAction.TYPING)
    except:
        pass
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–≤–µ—Ç: ¬´{msg.text}¬ª.\n"
        "–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∂—ë—Å—Ç–∫–∏–π, –Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä: 2‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –æ–¥–∏–Ω –º–∏–∫—Ä–æ-—à–∞–≥ ‚â§2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞."
    )
    reply = await ai_reply(uid, prompt, 0.9, 400)
    await msg.answer(reply, reply_markup=main_menu_kb())

@dp.message(F.text & ~F.text.startswith("/"))
async def free_chat(msg: types.Message):
    uid = msg.from_user.id
    await ensure_user(uid)
    await log_event(uid, "free_chat")
    try:
        await bot.send_chat_action(msg.chat.id, ChatAction.TYPING)
    except:
        pass
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´{msg.text}¬ª.\n"
        "–û—Ç–≤–µ—Ç—å –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø–æ –¥–µ–ª—É, 2‚Äì3 —Ñ—Ä–∞–∑—ã, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∏–∫—Ä–æ-—à–∞–≥."
    )
    reply = await ai_reply(uid, prompt, 0.8, 400)
    await msg.answer(reply, reply_markup=main_menu_kb())

# ---------- –†–µ–∂–∏–º —Å–Ω–∞ ----------
@dp.callback_query(F.data == "sleep:30")
async def cb_sleep(call: types.CallbackQuery):
    uid = call.from_user.id
    await start_timer(call.message.chat.id, uid, 30)
    await call.message.edit_text(
        "üåô –†–µ–∂–∏–º —Å–Ω–∞: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç ‚Äî –æ—Ç–±–æ–π.\n"
        "–î–æ —ç—Ç–æ–≥–æ:\n‚Ä¢ —Ç—ë–ø–ª—ã–π –¥—É—à\n‚Ä¢ —É–±–∞–≤—å —ç–∫—Ä–∞–Ω–Ω—ã–π —Å–≤–µ—Ç\n‚Ä¢ –ª—ë–≥–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="timer:stop")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
        ])
    )
    await call.answer()

# ---------- –ù–æ—á–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç ----------
async def _send_digest_to_user(uid: int):
    s = await fetch_stats(uid)
    chats = await free_chat_count_today(uid)
    prompt = (
        f"–°–≤–æ–¥–∫–∞ –¥–Ω—è: –ø–æ–±–µ–¥—ã={s['wins']}, —Å–¥–∞—á–∏={s['loses']}, —Å–≤–æ–±–æ–¥–∞={s['reclaimed']} –º–∏–Ω, "
        f"—Ç–∞–π–º–µ—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è={s['today_cnt']} ({s['today_min']} –º–∏–Ω), —á–∞—Ç–æ–≤={chats}. "
        "–°–¥–µ–ª–∞–π 2‚Äì3 —Ñ—Ä–∞–∑—ã: —Ç—ë–ø–ª–∞—è –ø–æ—Ö–≤–∞–ª–∞ + –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
    )
    ai = await ai_reply(uid, prompt, 0.8, 280)
    text = (
        "üåô –í–µ—á–µ—Ä–Ω–∏–π –∏—Ç–æ–≥\n"
        f"üèÜ –ü–æ–±–µ–¥—ã/—Å–¥–∞—á–∏: {s['wins']} / {s['loses']}\n"
        f"‚è≥ –ú–∏–Ω—É—Ç—ã —Å–≤–æ–±–æ–¥—ã: {s['reclaimed']}\n"
        f"‚è∞ –¢–∞–π–º–µ—Ä–æ–≤: {s['today_cnt']} ({s['today_min']} –º–∏–Ω)\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä—É: {chats}\n\n"
        f"{ai}"
    )
    try:
        await bot.send_message(uid, text, reply_markup=main_menu_kb())
    except Exception as e:
        log.warning(f"digest send fail {uid}: {e}")

async def nightly_digest_loop():
    tz = ZoneInfo(DIGEST_TZ)
    while True:
        try:
            now = datetime.now(tz)
            today = date.today().isoformat()
            if now.hour == DIGEST_HOUR:
                async with aiosqlite.connect(DB_PATH) as db:
                    cur = await db.execute("SELECT user_id, COALESCE(last_digest_date,'') FROM users")
                    rows = await cur.fetchall()
                for uid, last_day in rows:
                    if last_day == today:
                        continue
                    await _send_digest_to_user(uid)
                    async with aiosqlite.connect(DB_PATH) as db:
                        await db.execute("UPDATE users SET last_digest_date=? WHERE user_id=?", (today, uid))
                        await db.commit()
                await asyncio.sleep(65 * 60)
            else:
                await asyncio.sleep(5 * 60)
        except Exception as e:
            log.warning(f"digest loop err: {e}")
            await asyncio.sleep(60)

# ---------- Healthcheck ----------
async def _health(_req): return web.Response(text="OK")
async def start_web_server():
    app = web.Application()
    app.router.add_get("/", _health)
    app.router.add_get("/health", _health)
    runner = web.AppRunner(app); await runner.setup()
    port = int(os.getenv("PORT", "10000"))
    site = web.TCPSite(runner, "0.0.0.0", port); await site.start()
    log.info(f"üåê Healthcheck started on {port}")

# ---------- main ----------
async def main():
    await init_db()
    asyncio.create_task(start_web_server())
    asyncio.create_task(nightly_digest_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())