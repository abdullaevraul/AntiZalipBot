# bot.py ‚Äî aiogram 3.7+, long polling, –∞–≤—Ç–æ—Å–Ω–æ—Å webhook –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ

import os
import asyncio
import logging
from typing import Literal

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramConflictError  # <- –≤–∞–∂–Ω–æ

TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("ai-helper-bot")

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ====
BTN_CANT_START = "–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å"
BTN_DISTRACTED = "–û—Ç–≤–ª–µ–∫–∞—é—Å—å"
BTN_OVERLOAD   = "–ü–µ—Ä–µ–≥—Ä—É–∑"
BTN_BREAK      = "–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤"

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=BTN_CANT_START), KeyboardButton(text=BTN_DISTRACTED)],
        [KeyboardButton(text=BTN_OVERLOAD),   KeyboardButton(text=BTN_BREAK)]
    ],
    resize_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º‚Ä¶"
)

# ==== FSM ====
TopicType = Literal["cant_start", "distracted", "overload", "need_break"]
class Flow(StatesGroup):
    waiting_topic_details = State()

TOPIC_MAP = {
    BTN_CANT_START: "cant_start",
    BTN_DISTRACTED: "distracted",
    BTN_OVERLOAD:   "overload",
    BTN_BREAK:      "need_break",
}

def topic_intro(topic: TopicType) -> str:
    if topic == "cant_start":
        return ("–û–∫–µ–π, —Ç–µ–º–∞: ¬´–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å¬ª.\n"
                "1) –°–æ–∫—Ä–∞—Ç–∏–º —à–∞–≥ –¥–æ 10‚Äì15 –º–∏–Ω—É—Ç.\n"
                "2) –ß—Ç–æ –º–µ—à–∞–µ—Ç –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n"
                "3) –¢–∞–π–º–µ—Ä 10 –º–∏–Ω—É—Ç.\n\n"
                "–û–ø–∏—à–∏, —á—Ç–æ –ø—ã—Ç–∞–µ—à—å—Å—è –Ω–∞—á–∞—Ç—å –∏ —á—Ç–æ —Å—Ç–æ–ø–æ—Ä–∏—Ç.")
    if topic == "distracted":
        return ("–¢–µ–º–∞: ¬´–û—Ç–≤–ª–µ–∫–∞—é—Å—å¬ª.\n"
                "1) –í—ã–ª–µ—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/–≤–∫–ª–∞–¥–∫–∏.\n"
                "2) –û–¥–Ω–æ —Ä–∞–±–æ—á–µ–µ –æ–∫–Ω–æ.\n"
                "3) 15‚Äì20 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å + –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤.\n\n"
                "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç?")
    if topic == "overload":
        return ("–¢–µ–º–∞: ¬´–ü–µ—Ä–µ–≥—Ä—É–∑¬ª.\n"
                "1) –í—ã–≥—Ä—É–∑–∏ –∑–∞–¥–∞—á–∏ (–º–æ–∂–Ω–æ —Å—é–¥–∞).\n"
                "2) –û—Ç–º–µ—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å/–≤–∞–∂–Ω–æ—Å—Ç—å.\n"
                "3) 1 —à–∞–≥ –Ω–∞ 25 –º–∏–Ω—É—Ç.\n\n"
                "–ß—Ç–æ –¥–∞–≤–∏—Ç —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ?")
    return ("–¢–µ–º–∞: ¬´–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤¬ª.\n"
            "1) 5‚Äì10 –º–∏–Ω—É—Ç ‚Äî –≤–æ–¥–∞/–¥–≤–∏–∂–µ–Ω–∏–µ/–¥—ã—Ö–∞–Ω–∏–µ.\n"
            "2) –£—Å—Ç–∞–ª–æ—Å—Ç—å 1‚Äì10.\n"
            "3) –û–¥–∏–Ω —à–∞–≥ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã.\n\n"
            "–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–¥—ã—Ö?")

def topic_response(topic: TopicType, user_text: str) -> str:
    clip = user_text.strip()[:200]
    if topic == "cant_start":
        return ("–î–µ–π—Å—Ç–≤—É–µ–º:\n"
                "‚Ä¢ –ü–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ 10 –º–∏–Ω—É—Ç, –±–µ–∑ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–∞.\n"
                f"‚Ä¢ –£—á—ë–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç: ¬´{clip}¬ª.\n"
                "‚Ä¢ –ü–æ—Å–ª–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç. –ì–æ—Ç–æ–≤?")
    if topic == "distracted":
        return ("–§–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è:\n"
                "‚Ä¢ –ó–∞–∫—Ä–æ–π –ª–∏—à–Ω–µ–µ, –≤–∫–ª—é—á–∏ ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª.\n"
                "‚Ä¢ –û–¥–Ω–æ —Ä–∞–±–æ—á–µ–µ –æ–∫–Ω–æ –Ω–∞ 15 –º–∏–Ω—É—Ç.\n"
                f"‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä—ã: ¬´{clip}¬ª ‚Äî —É—á—ë–ª.\n"
                "–û—Ç–ø–∏—à–∏—Å—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
    if topic == "overload":
        return ("–°–Ω–∏–º–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑:\n"
                "‚Ä¢ –í—ã–ø–∏—à–∏ –∑–∞–¥–∞—á–∏.\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É ¬´—Å—Ä–æ—á–Ω–æ/–≤–∞–∂–Ω–æ¬ª –Ω–∞ 25 –º–∏–Ω—É—Ç.\n"
                f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã: ¬´{clip}¬ª.\n"
                "–°—Ç–∞—Ä—Ç—É–µ–º?")
    return ("–ü–µ—Ä–µ—Ä—ã–≤ –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã:\n"
            "‚Ä¢ 7 –º–∏–Ω—É—Ç –æ—Ñ—Ñ–ª–∞–π–Ω: –≤–æ–¥–∞/–¥–≤–∏–∂–µ–Ω–∏–µ/–¥—ã—Ö–∞–Ω–∏–µ.\n"
            "‚Ä¢ –í–µ—Ä–Ω—ë—à—å—Å—è ‚Äî –æ–¥–∏–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥.\n"
            f"‚Ä¢ –ó–∞–ø–æ–º–Ω–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç: ¬´{clip}¬ª.\n"
            "–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –∏ –≤–µ—Ä–Ω–∏—Å—å.")

async def select_topic(message: Message, state: FSMContext, topic: TopicType):
    await state.set_state(Flow.waiting_topic_details)
    await state.update_data(topic=topic)
    await message.answer(topic_intro(topic), reply_markup=MAIN_KB)

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ==== –•—ç–Ω–¥–ª–µ—Ä—ã ====
@dp.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ–≥–∞—Ç–æ—Ä. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=MAIN_KB
    )

@dp.message(Command("help"))
async def on_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏: ¬´–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å¬ª, ¬´–û—Ç–≤–ª–µ–∫–∞—é—Å—å¬ª, ¬´–ü–µ—Ä–µ–≥—Ä—É–∑¬ª, ¬´–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤¬ª\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=MAIN_KB
    )

@dp.message(F.text.in_(list(TOPIC_MAP.keys())))
async def on_topic_selected(message: Message, state: FSMContext):
    await select_topic(message, state, TOPIC_MAP[message.text])

@dp.message(Flow.waiting_topic_details, F.text.len() > 0)
async def on_topic_details(message: Message, state: FSMContext):
    data = await state.get_data()
    topic: TopicType = data.get("topic", "cant_start")
    reply = topic_response(topic, message.text)
    await message.answer(reply, reply_markup=MAIN_KB)
    await state.clear()

@dp.message(Flow.waiting_topic_details)
async def on_topic_details_nontext(message: Message):
    await message.answer("–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–æ–≤–∞–º–∏ ‚Äî —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? üôÇ", reply_markup=MAIN_KB)

@dp.message(F.text.len() > 0)
async def on_free_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if text in TOPIC_MAP:
        await select_topic(message, state, TOPIC_MAP[text])
        return
    await message.answer(
        "–ü–æ–Ω—è–ª. –î–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º:\n"
        "1) –¶–µ–ª—å –Ω–∞ 20‚Äì30 –º–∏–Ω—É—Ç?\n"
        "2) –ü–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ 5‚Äì10 –º–∏–Ω—É—Ç?\n"
        "3) –û–¥–∏–Ω –±–∞—Ä—å–µ—Ä?\n\n"
        "–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—É–Ω–∫—Ç–∞–º–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

@dp.message()
async def on_other(message: Message):
    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=MAIN_KB)

# ==== Errors ====
@dp.errors()
async def errors_handler(update, exception):
    logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: %s | update=%s", exception, update)
    return True

# ==== –°—Ç–∞—Ä—Ç —Å –∞–≤—Ç–æ-—Ä–µ—Ç—Ä–∞–µ–º –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ webhook ====
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    # –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—á–∏—Å—Ç–∫–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω, drop_pending_updates=True")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e!r}")

    # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª: –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–Ω–æ–≤–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç webhook ‚Äî —Å–Ω–µ—Å—ë–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
    backoff = 1
    while True:
        try:
            await dp.start_polling(bot, allowed_updates=["message"])
        except TelegramConflictError:
            logger.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∞–∫—Ç–∏–≤–µ–Ω webhook. –£–¥–∞–ª—è—é –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é polling‚Ä¶")
            try:
                await bot.delete_webhook(drop_pending_updates=True)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e!r}")
            await asyncio.sleep(backoff)
            backoff = min(backoff * 2, 30)  # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—ç–∫–æ—Ñ—Ñ –¥–æ 30—Å
            continue
        except Exception as e:
            logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ polling: {e!r}. –†–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 3—Å‚Ä¶")
            await asyncio.sleep(3)
            continue

if __name__ == "__main__":
    asyncio.run(main())
