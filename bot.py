# bot.py
# AntiZalipBot ‚Äî MVP —Å –º–µ–Ω—é, —Ç–∞–π–º–µ—Ä–∞–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Å—Ç—Ä–∏–∫–∞–º–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π events
# + Healthcheck web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render Free (–ø–æ—Ä—Ç —Å–∫–∞–Ω–µ—Ä)
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: aiogram<3.6, python-dotenv>=1.0,<2.0, aiosqlite
# –†–∞–Ω—Ç–∞–π–º –≤ –æ–±–ª–∞–∫–µ: PYTHON_VERSION=3.12.5 (–∏–ª–∏ runtime.txt: python-3.12.5)

import os
import asyncio
import logging
from datetime import datetime, timedelta, timezone, date

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram.client.session.aiohttp import AiohttpSession
from aiohttp import web
import aiosqlite

# ===================== –õ–û–ì–ò =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger("AntiZalipBot")

# ===================== –¢–û–ö–ï–ù =====================
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ .env")

# HTTP-—Å–µ—Å—Å–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
session = AiohttpSession(timeout=30)
bot = Bot(token=TOKEN, session=session)
dp = Dispatcher()

DB_PATH = "anti.db"

# ===================== –•–†–ê–ù–ò–õ–ö–ê (MVP) =====================
# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã: user_id -> asyncio.Task
active_timers: dict[int, asyncio.Task] = {}
# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞: user_id -> (until_dt, minutes)
timer_meta: dict[int, tuple[datetime, int]] = {}

# ===================== FSM –î–õ–Ø "–°–í–û–ô‚Ä¶" =====================
class TimerStates(StatesGroup):
    waiting_custom_minutes = State()

# ===================== –ö–ù–û–ü–ö–ò =====================
def main_menu_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚è≥ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="menu:timer")],
        [types.InlineKeyboardButton(text="üõå –†–µ–∂–∏–º —Å–Ω–∞ (30 –º–∏–Ω)", callback_data="sleep:30")],
        [
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:stats"),
            types.InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="menu:help"),
        ],
    ])
    return kb

def timers_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="5 –º–∏–Ω", callback_data="timer:5"),
            types.InlineKeyboardButton(text="15 –º–∏–Ω", callback_data="timer:15"),
            types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data="timer:30"),
        ],
        [
            types.InlineKeyboardButton(text="–°–≤–æ–π‚Ä¶", callback_data="timer:custom"),
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:root"),
        ],
    ])
    return kb

def after_timer_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="again")],
        [
            types.InlineKeyboardButton(text="‚úçÔ∏è –°–¥–µ–ª–∞—é –¥–µ–ª–æ", callback_data="do_task"),
            types.InlineKeyboardButton(text="üö∂ –ü—Ä–æ–≥—É–ª–∫–∞ 5 –º–∏–Ω", callback_data="walk"),
        ],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
    ])
    return kb

# ===================== –¢–ï–ö–°–¢–´ =====================
MOTIVATION = [
    "–°—Ç–æ–ø-—Å–∫—Ä–æ–ª–ª. –û–¥–∏–Ω –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —à–∞–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±–µ –¥–µ–Ω—å.",
    "–¢—ã –Ω–µ –ª–µ–Ω—Ç—è–π ‚Äî —Ç—ã –∑–∞–ª–∏–ø. –í—Å—Ç–∞—ë–º, –¥—ã—à–∏–º 10 —Ä–∞–∑, –∏ –≤ –±–æ–π.",
    "–ï—â—ë —á—É—Ç—å-—á—É—Ç—å —Ñ–æ–∫—É—Å–∞ ‚Äî –∏ —Ç—ã –≥–µ—Ä–æ–π —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.",
    "–í—ã–±–æ—Ä –ø—Ä–æ—Å—Ç: —Å–∫—Ä–æ–ª–ª –∏–ª–∏ –∂–∏–∑–Ω—å. –í—ã–±–∏—Ä–∞–π –∂–∏–∑–Ω—å.",
]

HELP_TEXT = (
    "–Ø –ø–æ–º–æ–≥–∞—é –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∑–∞–ª–∏–ø–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Ä–µ–º–µ–Ω–µ–º.\n\n"
    "–ß—Ç–æ —è —É–º–µ—é:\n"
    "‚Ä¢ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä 5/15/30 –º–∏–Ω—É—Ç –∏–ª–∏ —Å–≤–æ–π\n"
    "‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∏ –º—è–≥–∫–æ ¬´–≤—ã—Ç–∞—â–∏—Ç—å¬ª —Ç–µ–±—è –∏–∑ —Ä–∏–ª—Å–æ–≤\n"
    "‚Ä¢ –î–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ç–æ–ª—á–æ–∫: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –æ–¥–Ω–æ –¥–µ–ª–æ, –ø—Ä–æ–≥—É–ª–∫–∞\n"
    "‚Ä¢ üìä /stats ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç—Ä–∏–∫–∏\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –∑–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é\n"
    "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä\n"
    "/help ‚Äî –ø–æ–º–æ—â—å\n"
    "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–µ—Ä–∏—è –¥–Ω–µ–π\n"
    "/adm_today ‚Äî —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "/adm_week ‚Äî —Å–≤–æ–¥–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n"
)

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø AntiZalipBot üëã\n"
    "–ü–æ–º–æ–≥—É –≤—ã—Ä–≤–∞—Ç—å—Å—è –∏–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∂–∏–∑–Ω–∏.\n\n"
    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
)

# ===================== –ë–î: INIT / UTILS =====================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                created_at TEXT NOT NULL
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                finished_at TEXT NOT NULL,
                minutes INTEGER NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                event TEXT NOT NULL,
                value INTEGER,
                created_at TEXT NOT NULL
            )
        """)
        await db.commit()

async def ensure_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        if row is None:
            await db.execute(
                "INSERT INTO users (user_id, created_at) VALUES (?, ?)",
                (user_id, datetime.now(timezone.utc).isoformat())
            )
            await db.commit()

async def record_session(user_id: int, minutes: int):
    await ensure_user(user_id)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO sessions (user_id, finished_at, minutes) VALUES (?, ?, ?)",
            (user_id, datetime.now(timezone.utc).isoformat(), minutes)
        )
        await db.commit()

async def log_event(user_id: int, event: str, value: int | None = None):
    await ensure_user(user_id)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO events (user_id, event, value, created_at) VALUES (?, ?, ?, ?)",
            (user_id, event, value, datetime.now(timezone.utc).isoformat())
        )
        await db.commit()

async def fetch_stats(user_id: int):
    await ensure_user(user_id)
    async with aiosqlite.connect(DB_PATH) as db:
        # total sessions & minutes
        cur = await db.execute(
            "SELECT COUNT(*), COALESCE(SUM(minutes),0) FROM sessions WHERE user_id = ?",
            (user_id,)
        )
        total_cnt, total_min = await cur.fetchone()

        # today
        today = date.today().isoformat()
        cur = await db.execute(
            """
            SELECT COUNT(*), COALESCE(SUM(minutes),0)
            FROM sessions
            WHERE user_id = ?
              AND substr(finished_at,1,10) = ?
            """,
            (user_id, today)
        )
        today_cnt, today_min = await cur.fetchone()

        # streak
        cur = await db.execute(
            """
            SELECT DISTINCT substr(finished_at,1,10) AS d
            FROM sessions
            WHERE user_id = ?
            ORDER BY d DESC
            """,
            (user_id,)
        )
        rows = await cur.fetchall()
        days = [date.fromisoformat(r[0]) for r in rows]
        streak = 0
        cur_day = date.today()
        for d in days:
            if d == cur_day:
                streak += 1
                cur_day = cur_day - timedelta(days=1)
            elif d == (cur_day - timedelta(days=1)):
                streak += 1
                cur_day = cur_day - timedelta(days=1)
            else:
                break

        return {
            "total_cnt": total_cnt or 0,
            "total_min": total_min or 0,
            "today_cnt": today_cnt or 0,
            "today_min": today_min or 0,
            "streak": streak,
        }

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
def pick_motivation(uid: int, minutes: int) -> str:
    return MOTIVATION[hash((uid, minutes)) % len(MOTIVATION)]

async def cancel_user_timer(uid: int):
    task = active_timers.pop(uid, None)
    timer_meta.pop(uid, None)
    if task and not task.done():
        task.cancel()

async def schedule_timer(chat_id: int, user_id: int, minutes: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: –∂–¥—ë—Ç minutes, –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞—Ç–µ–º —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    try:
        await asyncio.sleep(minutes * 60)
        await record_session(user_id, minutes)
        await log_event(user_id, "timer_finish", minutes)
        timer_meta.pop(user_id, None)
        active_timers.pop(user_id, None)
        await bot.send_message(
            chat_id,
            f"‚è∞ {minutes} –º–∏–Ω—É—Ç –≤—ã—à–ª–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=after_timer_kb()
        )
    except asyncio.CancelledError:
        pass

async def start_timer(chat_id: int, user_id: int, minutes: int):
    await cancel_user_timer(user_id)
    until = datetime.now(timezone.utc) + timedelta(minutes=minutes)
    timer_meta[user_id] = (until, minutes)
    await log_event(user_id, "timer_start", minutes)
    task = asyncio.create_task(schedule_timer(chat_id, user_id, minutes))
    active_timers[user_id] = task

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –ö–û–ú–ê–ù–î–´ =====================
@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    await ensure_user(msg.from_user.id)
    await log_event(msg.from_user.id, "start")
    await msg.answer(WELCOME_TEXT, reply_markup=main_menu_kb())

@dp.message(Command("menu"))
async def cmd_menu(msg: types.Message):
    await log_event(msg.from_user.id, "menu_open")
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@dp.message(Command("help"))
async def cmd_help(msg: types.Message):
    await msg.answer(HELP_TEXT, reply_markup=main_menu_kb())

@dp.message(Command("stop"))
async def cmd_stop(msg: types.Message):
    await cancel_user_timer(msg.from_user.id)
    await log_event(msg.from_user.id, "stop")
    await msg.answer("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ö–æ–Ω—Ç—Ä–æ–ª—å —É —Ç–µ–±—è.", reply_markup=main_menu_kb())

@dp.message(Command("stats"))
async def cmd_stats(msg: types.Message):
    await log_event(msg.from_user.id, "stats_open")
    s = await fetch_stats(msg.from_user.id)
    text = (
        "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"–í—Å–µ–≥–æ —Ç–∞–π–º–µ—Ä–æ–≤: *{s['total_cnt']}*\n"
        f"–°—É–º–º–∞—Ä–Ω–æ –º–∏–Ω—É—Ç: *{s['total_min']}*\n\n"
        f"–°–µ–≥–æ–¥–Ω—è —Ç–∞–π–º–µ—Ä–æ–≤: *{s['today_cnt']}*\n"
        f"–°–µ–≥–æ–¥–Ω—è –º–∏–Ω—É—Ç: *{s['today_min']}*\n\n"
        f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥): *{s['streak']}*"
    )
    await msg.answer(text, parse_mode="Markdown", reply_markup=main_menu_kb())

# -------- –ê–¥–º–∏–Ω-—Å–≤–æ–¥–∫–∏ --------
@dp.message(Command("adm_today"))
async def adm_today(msg: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT COUNT(DISTINCT user_id), COUNT(*)
            FROM events
            WHERE substr(created_at,1,10)=date('now')
        """)
        users, events = await cur.fetchone()
    await msg.answer(f"üìä –°–µ–≥–æ–¥–Ω—è: {users} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {events} —Å–æ–±—ã—Ç–∏–π")

@dp.message(Command("adm_week"))
async def adm_week(msg: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT COUNT(DISTINCT user_id), COUNT(*)
            FROM events
            WHERE created_at >= datetime('now','-7 days')
        """)
        users, events = await cur.fetchone()
    await msg.answer(f"üìä –ó–∞ 7 –¥–Ω–µ–π: {users} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {events} —Å–æ–±—ã—Ç–∏–π")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ =====================
@dp.callback_query(F.data == "menu:root")
async def cb_menu_root(call: types.CallbackQuery):
    await log_event(call.from_user.id, "menu_open")
    await call.message.edit_text(WELCOME_TEXT, reply_markup=main_menu_kb())
    await call.answer()

@dp.callback_query(F.data == "menu:help")
async def cb_menu_help(call: types.CallbackQuery):
    await call.message.edit_text(HELP_TEXT, reply_markup=main_menu_kb())
    await call.answer()

@dp.callback_query(F.data == "menu:timer")
async def cb_menu_timer(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞:", reply_markup=timers_kb())
    await call.answer()

@dp.callback_query(F.data == "menu:stats")
async def cb_menu_stats(call: types.CallbackQuery):
    s = await fetch_stats(call.from_user.id)
    text = (
        "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"–í—Å–µ–≥–æ —Ç–∞–π–º–µ—Ä–æ–≤: *{s['total_cnt']}*\n"
        f"–°—É–º–º–∞—Ä–Ω–æ –º–∏–Ω—É—Ç: *{s['total_min']}*\n\n"
        f"–°–µ–≥–æ–¥–Ω—è —Ç–∞–π–º–µ—Ä–æ–≤: *{s['today_cnt']}*\n"
        f"–°–µ–≥–æ–¥–Ω—è –º–∏–Ω—É—Ç: *{s['today_min']}*\n\n"
        f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥): *{s['streak']}*"
    )
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())
    await call.answer()

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –¢–ê–ô–ú–ï–†–´ =====================
@dp.callback_query(F.data.startswith("timer:"))
async def cb_timer(call: types.CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    chat_id = call.message.chat.id
    data = call.data or ""

    if data == "timer:custom":
        await state.set_state(TimerStates.waiting_custom_minutes)
        await call.message.edit_text(
            "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (1‚Äì180):",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="menu:timer")]
                ]
            )
        )
        await call.answer()
        return

    minutes = int(data.split(":")[1])  # 5/15/30
    await start_timer(chat_id, uid, minutes)
    mot = pick_motivation(uid, minutes)
    await call.message.edit_text(
        f"‚úÖ –¢–∞–π–º–µ—Ä –≤–∫–ª—é—á—ë–Ω –Ω–∞ {minutes} –º–∏–Ω.\n{mot}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
            ]
        )
    )
    await call.answer("–ü–æ–≥–Ω–∞–ª–∏!")

@dp.message(TimerStates.waiting_custom_minutes, F.text)
async def custom_minutes_input(msg: types.Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text.isdigit():
        await msg.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 180. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ /menu.")
        return
    n = int(text)
    if not (1 <= n <= 180):
        await msg.reply("–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1‚Äì180 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await state.clear()
    uid = msg.from_user.id
    chat_id = msg.chat.id
    await start_timer(chat_id, uid, n)
    mot = pick_motivation(uid, n)
    await msg.reply(
        f"‚úÖ –¢–∞–π–º–µ—Ä –≤–∫–ª—é—á—ë–Ω –Ω–∞ {n} –º–∏–Ω.\n{mot}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
            ]
        )
    )

@dp.callback_query(F.data == "stop")
async def cb_stop(call: types.CallbackQuery):
    await cancel_user_timer(call.from_user.id)
    await log_event(call.from_user.id, "stop")
    await call.message.edit_text("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu_kb())
    await call.answer()

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –ü–û–°–õ–ï –¢–ê–ô–ú–ï–†–ê =====================
@dp.callback_query(F.data == "again")
async def cb_again(call: types.CallbackQuery):
    uid = call.from_user.id
    chat_id = call.message.chat.id
    minutes = 15
    if uid in timer_meta and timer_meta[uid][1] > 0:
        minutes = timer_meta[uid][1]
    await start_timer(chat_id, uid, minutes)
    await call.message.edit_text(
        f"üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –Ω–∞ {minutes} –º–∏–Ω. –î–µ—Ä–∂–∏–º—Å—è.",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
            ]
        )
    )
    await call.answer()

@dp.callback_query(F.data == "do_task")
async def cb_do_task(call: types.CallbackQuery):
    await call.message.edit_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–µ—à—å –∑–∞ 15‚Äì30 –º–∏–Ω—É—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –≤–µ—Ä–Ω–∏—Å—å –≤ /menu."
    )
    await call.answer()

@dp.callback_query(F.data == "walk")
async def cb_walk(call: types.CallbackQuery):
    await call.message.edit_text(
        "üö∂ –í—ã–π–¥–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–¥–∞–ª—å, —Ä–∞–∑–æ–º–Ω–∏ —à–µ—é –∏ –ø–ª–µ—á–∏, —Å–¥–µ–ª–∞–π 20 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.\n"
        "–í–µ—Ä–Ω—ë—à—å—Å—è ‚Äî –Ω–∞–∂–º–∏ /menu."
    )
    await call.answer()

# ===================== –†–ï–ñ–ò–ú –°–ù–ê =====================
@dp.callback_query(F.data == "sleep:30")
async def cb_sleep(call: types.CallbackQuery):
    uid = call.from_user.id
    chat_id = call.message.chat.id
    minutes = 30
    await start_timer(chat_id, uid, minutes)
    await call.message.edit_text(
        "üåô –†–µ–∂–∏–º —Å–Ω–∞: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç ‚Äî –æ—Ç–±–æ–π.\n"
        "–î–æ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:\n"
        "‚Ä¢ —Ç—ë–ø–ª—ã–π –¥—É—à\n"
        "‚Ä¢ —ç–∫—Ä–∞–Ω–Ω—ã–π —Å–≤–µ—Ç —É–±–∞–≤–∏—Ç—å\n"
        "‚Ä¢ –ª—é–±–æ–π –ª—ë–≥–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:root")],
            ]
        )
    )
    await call.answer()

# ===================== HEALTHCHECK WEB (–¥–ª—è Render Free) =====================
async def _healthcheck(request: web.Request):
    return web.Response(text="OK")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", _healthcheck)
    app.router.add_get("/health", _healthcheck)

    runner = web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    logger.info(f"üåê Healthcheck server started on 0.0.0.0:{port}")

# ===================== –¢–û–ß–ö–ê –í–•–û–î–ê =====================
async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î‚Ä¶")
    await init_db()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–æ–±–º–∞–Ω–∫–∞ –ø–æ—Ä—Ç–∞ –¥–ª—è Render Web Service)
    asyncio.create_task(start_web_server())

    logger.info("‚úÖ AntiZalipBot –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
