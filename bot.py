# main.py
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –Ω–æ —Ä–∞–±–æ—á–∏–π Telegram-–±–æ—Ç –Ω–∞ aiogram v3
# –§–∏—á–∏:
# - /start –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —á–µ—Ç—ã—Ä—å–º—è –∫–Ω–æ–ø–∫–∞–º–∏ (ReplyKeyboard ‚Äî –±–µ–∑ callback'–æ–≤ => –±–µ–∑ "–≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
# - –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞; –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ‚Äî –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é
# - –ü—Ä–æ—Å—Ç–∞—è FSM: –≤—ã–±–æ—Ä —Ç–µ–º—ã -> –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è -> –æ—Ç–≤–µ—Ç -> –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
# - –ì—Ä—É–±–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞ + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

import os
import asyncio
import logging
from typing import Literal

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ========= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =========
TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("ai-helper-bot")

# ========= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
BTN_CANT_START = "–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å"
BTN_DISTRACTED = "–û—Ç–≤–ª–µ–∫–∞—é—Å—å"
BTN_OVERLOAD   = "–ü–µ—Ä–µ–≥—Ä—É–∑"
BTN_BREAK      = "–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤"

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=BTN_CANT_START), KeyboardButton(text=BTN_DISTRACTED)],
        [KeyboardButton(text=BTN_OVERLOAD),   KeyboardButton(text=BTN_BREAK)]
    ],
    resize_keyboard=True,
    input_field_placeholder="–ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º‚Ä¶"
)

# ========= –°–æ—Å—Ç–æ—è–Ω–∏—è =========
TopicType = Literal["cant_start", "distracted", "overload", "need_break"]

class Flow(StatesGroup):
    waiting_topic_details = State()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –∏ —Ç–µ–ø–µ—Ä—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é

# ========= –•–µ–ª–ø–µ—Ä—ã =========
TOPIC_MAP: dict[str, TopicType] = {
    BTN_CANT_START: "cant_start",
    BTN_DISTRACTED: "distracted",
    BTN_OVERLOAD:   "overload",
    BTN_BREAK:      "need_break",
}

def topic_intro(topic: TopicType) -> str:
    if topic == "cant_start":
        return (
            "–û–∫–µ–π, —Ç–µ–º–∞: ¬´–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å¬ª.\n"
            "–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç:\n"
            "1) –£–º–µ–Ω—å—à–∏–º —à–∞–≥: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞—á—É –Ω–∞ 10‚Äì15 –º–∏–Ω—É—Ç.\n"
            "2) –£–±–µ—Ä–∏ –±–∞—Ä—å–µ—Ä—ã: —á—Ç–æ –º–µ—à–∞–µ—Ç —Å–µ—Å—Ç—å –∑–∞ —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n"
            "3) –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä: 10 –º–∏–Ω—É—Ç –Ω–∞ —Ä–∞–∑–≥–æ–Ω.\n\n"
            "–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—ã—Ç–∞–µ—à—å—Å—è –Ω–∞—á–∞—Ç—å –∏ —á—Ç–æ —Ç–µ–±—è —Å—Ç–æ–ø–æ—Ä–∏—Ç."
        )
    if topic == "distracted":
        return (
            "–¢–µ–º–∞: ¬´–û—Ç–≤–ª–µ–∫–∞—é—Å—å¬ª.\n"
            "–≠–∫—Å–ø—Ä–µ—Å—Å-–ø–ª–∞–Ω:\n"
            "1) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤–∫–ª–∞–¥–∫–∏ ‚Äî –≤ –æ—Ñ—Ñ.\n"
            "2) –†–∞–±–æ—á–µ–µ –æ–∫–Ω–æ –æ–¥–Ω–æ, –∑–∞–¥–∞—á–∏ ‚Äî –≤ —Å–ø–∏—Å–∫–µ.\n"
            "3) –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã 15‚Äì20 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤.\n\n"
            "–ù–∞–ø–∏—à–∏, —á—Ç–æ –¥–µ–ª–∞–µ—à—å –∏ –Ω–∞ —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —É—Ö–æ–¥–∏—Ç –≤–Ω–∏–º–∞–Ω–∏–µ."
        )
    if topic == "overload":
        return (
            "–¢–µ–º–∞: ¬´–ü–µ—Ä–µ–≥—Ä—É–∑¬ª.\n"
            "–°–Ω–∏–º–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ:\n"
            "1) –í—ã–≥—Ä—É–∑–∏ –≤—Å—ë –∏–∑ –≥–æ–ª–æ–≤—ã: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.\n"
            "2) –ü–æ–º–µ—Ç–∏–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å/–≤–∞–∂–Ω–æ—Å—Ç—å.\n"
            "3) –í—ã–±–µ—Ä–µ–º 1‚Äì2 —à–∞–≥–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç.\n\n"
            "–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Ç–µ–∫—É—â–µ–µ ¬´–∑–∞–≤–∞–ª–µ–Ω–æ¬ª: –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥–µ–¥–ª–∞–π–Ω—ã –¥–∞–≤—è—Ç?"
        )
    return (
        "–¢–µ–º–∞: ¬´–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤¬ª.\n"
        "–ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
        "1) 5‚Äì10 –º–∏–Ω—É—Ç ‚Äî –¥—ã—Ö–∞–Ω–∏–µ/–ø—Ä–æ–≥—É–ª–∫–∞/–≤–æ–¥–∞.\n"
        "2) –û—Ç–º–µ—Ç–∏–º —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –ø–æ —à–∫–∞–ª–µ 1‚Äì10.\n"
        "3) –†–µ—à–∏–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã.\n\n"
        "–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –∏ —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–¥—ã—Ö?"
    )

def topic_response(topic: TopicType, user_text: str) -> str:
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –Ω–æ –ø–æ–ª–µ–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥.
    if topic == "cant_start":
        return (
            "–í–∏–∂—É –±–∞—Ä—å–µ—Ä—ã. –ß—Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n"
            "‚Ä¢ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ 10 –º–∏–Ω—É—Ç, –≤—ã–ø–æ–ª–Ω–∏–º –±–µ–∑ –∏–¥–µ–∞–ª–∏–∑–º–∞.\n"
            f"‚Ä¢ –£—á—ë–ª —Ç–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ: ¬´{user_text[:200]}¬ª.\n"
            "‚Ä¢ –ü–æ—Å–ª–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. –ì–æ—Ç–æ–≤?"
        )
    if topic == "distracted":
        return (
            "–§–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è:\n"
            "‚Ä¢ –ó–∞–∫—Ä–æ–π –≤—Å–µ –Ω–µ—Ä–∞–±–æ—á–∏–µ –≤–∫–ª–∞–¥–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –≤ ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª.\n"
            "‚Ä¢ –û—Ç–∫—Ä–æ–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª/–∑–∞–¥–∞—á—É –Ω–∞ 15 –º–∏–Ω—É—Ç.\n"
            f"‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ —Ç–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: ¬´{user_text[:200]}¬ª ‚Äî —É—á—ë–ª.\n"
            "–û—Ç–ø–∏—à–∏—Å—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å."
        )
    if topic == "overload":
        return (
            "–°–Ω–∏–º–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑ –ø–æ —à–∞–≥–∞–º:\n"
            "‚Ä¢ –í—ã–ø–∏—à–∏ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫ (–º–æ–∂–Ω–æ –∑–¥–µ—Å—å).\n"
            "‚Ä¢ –ü–æ–º–µ—Ç—å –æ–¥–Ω—É ¬´—Å—Ä–æ—á–Ω–æ/–≤–∞–∂–Ω–æ¬ª ‚Äî —Å–¥–µ–ª–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π –∑–∞ 25 –º–∏–Ω—É—Ç.\n"
            f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è: ¬´{user_text[:200]}¬ª.\n"
            "–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç—å —Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏?"
        )
    return (
        "–û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã:\n"
        "‚Ä¢ 7 –º–∏–Ω—É—Ç ‚Äî –±–µ–∑ —ç–∫—Ä–∞–Ω–∞: –≤–æ–¥–∞/–¥—ã—Ö–∞–Ω–∏–µ/–¥–≤–∏–∂–µ–Ω–∏–µ.\n"
        "‚Ä¢ –í–µ—Ä–Ω—ë—à—å—Å—è –∏ –Ω–∞–∑–æ–≤—ë—à—å –æ–¥–∏–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥.\n"
        f"‚Ä¢ –ó–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ¬´{user_text[:200]}¬ª.\n"
        "–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –∏ –æ—Ç–ø–∏—à–∏—Å—å, –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—à—å—Å—è."
    )

# ========= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =========
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========

@dp.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ–≥–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏, —á—Ç–æ –±–ª–∏–∂–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=MAIN_KB
    )

@dp.message(Command("help"))
async def on_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
        "/start ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–ö–Ω–æ–ø–∫–∏: ¬´–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å¬ª, ¬´–û—Ç–≤–ª–µ–∫–∞—é—Å—å¬ª, ¬´–ü–µ—Ä–µ–≥—Ä—É–∑¬ª, ¬´–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤¬ª\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º ‚Äî –æ—Ç–≤–µ—á—É –ø–æ —Å—É—Ç–∏.",
        reply_markup=MAIN_KB
    )

@dp.message(F.text.in_(list(TOPIC_MAP.keys())))
async def on_topic_selected(message: Message, state: FSMContext):
    topic = TOPIC_MAP[message.text]
    await state.set_state(Flow.waiting_topic_details)
    await state.update_data(topic=topic)
    await message.answer(topic_intro(topic), reply_markup=MAIN_KB)

@dp.message(Flow.waiting_topic_details, F.text.len() > 0)
async def on_topic_details(message: Message, state: FSMContext):
    data = await state.get_data()
    topic: TopicType = data.get("topic", "cant_start")  # –¥–µ—Ñ–æ–ª—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    reply = topic_response(topic, message.text)
    await message.answer(reply, reply_markup=MAIN_KB)
    # –í–æ–∑–≤—Ä–∞—Ç –≤ "–±–µ—Å—Å–æ—Å—Ç–æ—è–Ω–∏–µ" ‚Äî –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç
    await state.clear()

@dp.message(Flow.waiting_topic_details)
async def on_topic_details_nontext(message: Message):
    await message.answer("–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–æ–≤–∞–º–∏ ‚Äî —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? üôÇ", reply_markup=MAIN_KB)

@dp.message(F.text.len() > 0)
async def on_free_text(message: Message):
    # –û–±—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
    text = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–ø–∏—Å–∞–ª –æ–¥–Ω—É –∏–∑ —Ñ—Ä–∞–∑-–∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è),
    # –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –≤—ã–±–æ—Ä —Ç–µ–º—ã, —á—Ç–æ–±—ã –Ω–µ ¬´—Ç–µ—Ä—è—Ç—å¬ª —Å—Ü–µ–Ω–∞—Ä–∏–π.
    if text in TOPIC_MAP:
        await on_topic_selected(message, FSMContext(bot=bot, storage=dp.storage, chat=message.chat, user=message.from_user))
        return

    await message.answer(
        "–ü–æ–Ω—è–ª. –î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º:\n"
        "1) –¶–µ–ª—å –Ω–∞ 20‚Äì30 –º–∏–Ω—É—Ç?\n"
        "2) –ü–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ 5‚Äì10 –º–∏–Ω—É—Ç?\n"
        "3) –û–¥–∏–Ω –≤–µ—Ä–æ—è—Ç–Ω—ã–π –±–∞—Ä—å–µ—Ä?\n\n"
        "–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ –ø—É–Ω–∫—Ç–∞–º–∏. –ò–ª–∏ –Ω–∞–∂–º–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

@dp.message()
async def on_other(message: Message):
    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=MAIN_KB)

# ========= Error handler =========
@dp.errors()
async def errors_handler(update, exception):
    logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: %s | update=%s", exception, update)
    return True  # –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ

# ========= –ê–Ω—Ç–∏—Ñ–ª—É–¥ (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π) =========
# Aiogram v3 —É–∂–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏ middlewares/limits.

# ========= –ó–∞–ø—É—Å–∫ =========
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    await dp.start_polling(bot, allowed_updates=["message"])

if __name__ == "__main__":
    asyncio.run(main())
